import shutil
import os
import cv2
import numpy as np
# density = 200
# shutil.rmtree("F:/paste_videos/images_pure_tailings/validation/" + str(density))
# os.mkdir("F:/paste_videos/images_pure_tailings/validation/" + str(density))
#
# video_path = "F:/paste_videos/灰沙比1_16/" + str(density) + ".MOV"
#
# vc = cv2.VideoCapture(video_path)  # 读入视频文件
#
# if vc.isOpened():  # 判断是否正常打开
#     rval, frame = vc.read()
# else:
#     rval = False
#
# a = 1
#
# while rval:  # 循环读取视频帧
#
#     rval, frame = vc.read()
#     a += 1
#     print(a)

# 统计文件夹下文件数量
# density = 200
# while True:
#
#     if not os.path.exists('F:/paste_videos/images_pure_tailings/train/' + str(density)):
#         if density > 780:
#             break
#         if density < 600:
#             density += 50
#         else:
#             density += 5
#         print(str('F:/paste_videos/images_pure_tailings/train/' + str(density)) + "不存在.")
#         continue
#
#     DIR_TRAIN = 'F:/paste_videos/images_pure_tailings/train/' + str(density) #要统计的文件夹
#     DIR_VALIDATION = 'F:/paste_videos/images_pure_tailings/validation/' + str(density) #要统计的文件夹
#     print(str(density) + ':')
#     print('  train: ' + str(len([name for name in os.listdir(DIR_TRAIN) if os.path.isfile(os.path.join(DIR_TRAIN, name))])))
#     print('  validation: ' + str(len([name for name in os.listdir(DIR_VALIDATION) if os.path.isfile(os.path.join(DIR_VALIDATION, name))])))
#     if density == 780:
#         break
#     if density < 600:
#         density += 50
#     else:
#         density += 5

# 写文件
# f = open('../test.txt', 'w')
# i = 0
# density = 200
# while i >= 0:
#     if density == 610:
#         density += 5
#         continue
#     f.write("'" + str(i) + "': '" + str(density) + "  ',\n")
#     i += 1
#     if density == 780:
#         break
#     if density < 600:
#         density += 50
#     else:
#         density += 5
#
# f.close()

# 保存矩阵为excel
# import xlwt # xls
# from openpyxl import Workbook # xlsx
#
# def save(data, path):
#     # xlsx
#     workbook = Workbook()
#     booksheet = workbook.active  # 获取当前活跃的sheet,默认是第一个sheet
#     h = len(data) # 行数
#     l = len(data[0]) #列数
#     for i in range(h):
#         for j in range(l):
#             booksheet.cell(i+1, j+1).value = data[i][j]
#     workbook.save(path)
#
#     # xls
#     # f = xlwt.Workbook()  # 创建工作簿
#     # sheet1 = f.add_sheet(u'sheet1', cell_overwrite_ok=True)  # 创建sheet
#     # h = len(data) # 行数
#     # l = len(data[0]) #列数
#     # # [h, l] = data.shape  # h为行数，l为列数
#     # for i in range(h):
#     #     for j in range(l):
#     #         sheet1.write(i, j, data[i][j])
#     # f.save(path)
#
# best_matrix = [
#     [1, 2],
#     [3, 4]
# ]
# save(best_matrix, './testExcel.xlsx')

# loss_train = [0.08592031298409145, 0.08567021293410122, 0.0848904358433881, 0.0826744567706545, 0.07710758500727298, 0.07071884658208362, 0.06558531973932581, 0.05985849951990018, 0.05386206326325439, 0.05024405449131203, 0.047560649723201606, 0.04543547172493306, 0.0435511489082577, 0.040949880048383805, 0.039900136823335694, 0.03861148198150748, 0.03710263269730534, 0.03644099132691774, 0.035765597539399244, 0.03418614206376014, 0.032993530441967144, 0.03244810307844229, 0.03158714774588264, 0.030769255580397836, 0.030303446038976892, 0.027752744189441094, 0.027587450180956076, 0.02627130414537242, 0.02523342456136431, 0.025393213063533763, 0.023486026170523578, 0.024031865082556773, 0.02220494496136738, 0.021879862152136765, 0.021744583502881824, 0.021259119714124745, 0.020891246448421302, 0.019959952230245593, 0.020424840199814658, 0.01922347156921875]
# loss_val = [0.08574746852313285, 0.08529594842489664, 0.08329124775799839, 0.07852583586911618, 0.07040494391412445, 0.06537574070356625, 0.05674639042321738, 0.05199131648261826, 0.04603732039918115, 0.04026351018901511, 0.037161224770855594, 0.03860796986720263, 0.030495048601389962, 0.032739133081394874, 0.029057780720970847, 0.027002018354671857, 0.02442261546979219, 0.024345738340765883, 0.02446919460317273, 0.024359390565327235, 0.026332497132288944, 0.02477766741147805, 0.021155257981060903, 0.01953960610674573, 0.018416048244480447, 0.017880224130112372, 0.015418355695871048, 0.015906609633526244, 0.015203598509361217, 0.011956161925028928, 0.013283621271451313, 0.013916256307781517, 0.013899031558852176, 0.011199354751285537, 0.010564197303154768, 0.009636560898451578, 0.011202651162297178, 0.014077116536113607, 0.0099435160557429, 0.009938783743680813]
# acc_train = [0.023933209647495363, 0.02235621521335807, 0.025324675324675326, 0.03719851576994434, 0.06567717996289425, 0.09387755102040816, 0.12987012987012986, 0.16846011131725416, 0.21391465677179963, 0.25380333951762524, 0.27653061224489794, 0.3072356215213358, 0.3203153988868275, 0.3602968460111317, 0.3738404452690167, 0.39471243042671617, 0.41150278293135434, 0.42634508348794065, 0.43116883116883115, 0.45148423005565863, 0.4730055658627087, 0.48042671614100185, 0.49944341372912804, 0.5156771799628942, 0.5202226345083488, 0.5586270871985157, 0.5645640074211503, 0.5858070500927643, 0.5972170686456401, 0.5993506493506493, 0.6283858998144712, 0.6244897959183674, 0.6457328385899814, 0.6623376623376623, 0.6605751391465677, 0.6666048237476809, 0.6760667903525046, 0.687847866419295, 0.6884972170686456, 0.7057513914656772]
# acc_val = [0.021861471861471863, 0.02316017316017316, 0.029653679653679654, 0.06082251082251082, 0.08398268398268398, 0.1510822510822511, 0.23073593073593074, 0.26645021645021644, 0.3220779220779221, 0.41493506493506493, 0.39956709956709957, 0.3829004329004329, 0.5188311688311689, 0.491991341991342, 0.5175324675324675, 0.5857142857142857, 0.6008658008658009, 0.5976190476190476, 0.606926406926407, 0.6151515151515151, 0.5772727272727273, 0.5935064935064935, 0.6532467532467533, 0.6976190476190476, 0.7, 0.7196969696969697, 0.7586580086580087, 0.7632034632034632, 0.766017316017316, 0.8192640692640693, 0.793939393939394, 0.7796536796536796, 0.7813852813852814, 0.825974025974026, 0.8471861471861472, 0.8603896103896104, 0.8248917748917749, 0.7796536796536796, 0.848917748917749, 0.8495670995670995]
# print(len(loss_train))
# print(len(loss_val))
# print(len(acc_train))
# print(len(acc_val))

# best_matrix = [[i for i in range(44)] for i in range(44)]
#
# h = len(best_matrix)
# l = len(best_matrix[0])
# for i in range(0, 10):
#     for j in range(l-1, 9, -1):
#         best_matrix[i][j+1] = best_matrix[i][j]
# for i in range(h-1, 9, -1):
#     for j in range(0, 10):
#         best_matrix[i+1][j] = best_matrix[i][j]
# for i in range(h-1, 9, -1):
#     for j in range(l-1, 9, -1):
#         best_matrix[i+1][j+1] = best_matrix[i][j]
# for i in range(h):
#     best_matrix[i][10] = 'x'
# for j in range(l):
#     best_matrix[10][j] = 'x'
num = 0
matrix2 = [[0 for i in range(3)] for i in range(44)]

for i in range(44):
    for j in range(3):
        matrix2[i][j] = num
        num += 1

print(matrix2)
